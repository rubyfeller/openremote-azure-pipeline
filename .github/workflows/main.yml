name: Deploy OpenRemote
on:
  workflow_dispatch:
    inputs:
      enable_backups:
        description: 'Enable backups'
        required: true
        default: false
        type: boolean
      enable_monitoring:
        description: 'Enable monitoring'
        required: true
        default: false
        type: boolean
      region:
        description: 'Azure region'
        required: true
        default: 'Central India'
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: Development

    defaults:
      run:
        shell: bash
        working-directory: ./terraform-azure

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./
          framework: terraform
        continue-on-error: true
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.8.5"

      - name: Connect to Azure
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group, Storage Account and Container Exist
        run: |
          # Create resource group if it doesn't exist
          az group show --name ${{ secrets.RESOURCE_GROUP_NAME }} || \
          az group create --name ${{ secrets.RESOURCE_GROUP_NAME }} --location ${{ secrets.AZURE_LOCATION }}
        
          # Create storage account if it doesn't exist
          az storage account show --name ${{ secrets.STORAGE_ACCOUNT }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} || \
          az storage account create --name ${{ secrets.STORAGE_ACCOUNT }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --location ${{ secrets.AZURE_LOCATION }} --sku Standard_LRS
        
          # Create storage container if it doesn't exist
          az storage container show --name ${{ secrets.CONTAINER_NAME }} --account-name ${{ secrets.STORAGE_ACCOUNT }} --auth-mode login || \
          az storage container create --name ${{ secrets.CONTAINER_NAME }} --account-name ${{ secrets.STORAGE_ACCOUNT }} --auth-mode login
          
      - name: Terraform Init
        id: init
        env:
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_ssh_source_ip: ${{ secrets.SSH_SOURCE_IP }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: terraform plan -no-color -var="enable_backups=${{ github.event.inputs.enable_backups }}" -var="enable_monitoring=${{ github.event.inputs.enable_monitoring }}" -var="region=${{ github.event.inputs.region }}"
        continue-on-error: true
      
      - name: Terraform Apply
        id: apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_ssh_source_ip: ${{ secrets.SSH_SOURCE_IP }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: terraform apply -no-color -auto-approve -var="enable_backups=${{ github.event.inputs.enable_backups }}" -var="enable_monitoring=${{ github.event.inputs.enable_monitoring }}" -var="region=${{ github.event.inputs.region }}"
        continue-on-error: true